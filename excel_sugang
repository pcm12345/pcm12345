package com.carrot.excel.controller;

import com.carrot.sugang.service.SugangService;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.carrot.excel.dao.ExcelVO;
import com.carrot.excel.service.ExcelService;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/excel")
@Api(description = "엑셀다운로드, 업로드 기능" , tags="엑셀다운로드/업로드")
@Slf4j
public class ExcelController {

   @Autowired
   private ExcelService excelService;

   @Autowired
   private RedisTemplate redisTemplate;

   @Autowired
   private ObjectMapper objectMapper;

   @Autowired
   private SugangService sugangService;

/**
    *프로그램 신청자 리스트 다운로드
*@parampageIdx
*@paramname
*@paramemail
*@paramresponse
*@paramstatus
*@parampayStatus
*@throwsException
    */
@PostMapping("/sugang-user-list/{pageIdx}")
   @ApiOperation(value="엑셀 다운로드 기능[완]", notes="검색된 목록 리스트를 엑셀로 다운로드 한다.")
   public void excelDownSugangUserList(@PathVariable("pageIdx") int pageIdx, @RequestParam(value="name", required = false) String name, @RequestParam(name="email", required = false) String email
         , HttpServletResponse response , @RequestParam(value="status", defaultValue = "") String status, @RequestParam(value="payStatus", defaultValue = "") String payStatus
         , HttpServletRequest request ) throws Exception {

log.info("##### 엑셀다운로드");
log.info("#### ExcelController.excelDownSugangUserList pageIdx : " + pageIdx + " name : " + name + " email : " + email + " status : " + status + " payStatus : " + payStatus);
      Map<Object, Object> map = new LinkedHashMap<Object, Object>();
      map = redisTemplate.opsForHash().entries(request.getHeader("accessToken"));
      String conditions = "";
      Map<Object, Object> data = new HashMap<Object, Object>();
      data.put("pageIdx", pageIdx);
      data.put("name", name);
      data.put("email", email);
      data.put("status", status);
      data.put("payStatus", payStatus);
      conditions = objectMapper.writeValueAsString(data);
      Map<Object, Object> pageMap  = sugangService.selectPage(pageIdx);
      excelService.insertExcelLog(Integer.parseInt(map.get("idx").toString()), conditions, "excelDownSugangUserList");

      excelService.excelDownSugangUserList(pageIdx, name, email, response, status, payStatus, pageMap);

   }

   // 수강신청 취소자 리스트 다운로드
   @PostMapping("/sugang-cancle-list/{pageIdx}")
   @ApiOperation(value="수강신청 취소자 리스트 다운로드[완]", notes="검색된 목록 리스트를 엑셀로 다운로드 한다.")
   public void excelDownSugangCancleUserList(@PathVariable("pageIdx") int pageIdx, @RequestParam(value="payStatus", defaultValue = "") String payStatus, HttpServletResponse response
            , HttpServletRequest request ) throws Exception {

log.info("##### 엑셀다운로드");
log.info("#### ExcelController.excelDownSugangCancleUserList pageIdx : " + pageIdx + " payStatus : " + payStatus);
      Map<Object, Object> map = new LinkedHashMap<Object, Object>();
      map = redisTemplate.opsForHash().entries(request.getHeader("accessToken"));
      String conditions = "";
      Map<Object, Object> data = new HashMap<Object, Object>();
      data.put("pageIdx", pageIdx);
      data.put("payStatus", payStatus);
      conditions = objectMapper.writeValueAsString(data);
      excelService.insertExcelLog(Integer.parseInt(map.get("idx").toString()), conditions, "excelDownSugangCancleUserList");

      excelService.excelDownSugangCancleUserList(pageIdx, response, payStatus);

   }

   @PostMapping("/upload-ban")
   @ApiOperation(value="엑셀파일 내용 업로드 하기[완]", notes="입과불가자 엑셀파일로 업로드")
   public void excelUploadBanUser(@ModelAttribute ExcelVO vo) throws Exception {

log.info("#### 입과 불가자 엑셀 등록");
log.info("ExcelController.excelUploadBanUser");
      excelService.excelUploadBanUser(vo);
   }

   @GetMapping("/select-conditions/{idx}")
   @ApiOperation(value="엑셀파일 내용 업로드 하기[완]", notes="입과불가자 엑셀파일로 업로드")
   public Map<Object, Object> selectExcelLog(@PathVariable("idx") int idx) throws Exception {

log.info("#### 엑셀 로그 기록 조건 보기");
log.info("ExcelController.selectExcelLog");
      Map<Object, Object> result = new LinkedHashMap<Object, Object>();

      result = excelService.selectExcelLog(idx);

      return result;
   }
}
