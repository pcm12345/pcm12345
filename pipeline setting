 

 


 

1. Gitlab 공식 Repository를 추가한다.(root 권한)


curl -L [<https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh>](<https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh>) | sudo bash

 

2. Gitlab Runner의 최신버전을 설치한다(root 권한)


yum install -y gitlab-runner
#또는 apt-get install 사용
 

3. gitlab-runner 를 carrot 계정으로 실행하도록 설치한다.(root 권한)



gitlab-runner uninstall
gitlab-runner install --user=carrot --working-directory=/home/carrot
gitlab-runner start

 


# gitlab 의 devWorker // solutions0036--! 계정에 해당 장비의 SSH 공개키를 등록한다.

# ssh 키 생성
ssh-keygen -t rsa -C "devWork" -b 4096

# 생성한 공개키를 깃에 등록
cat /home/carrot/.ssh/id_rsa.pub
 

4. Gitlab Runner 등록(root 권한) : 한 장비에 복수개의 프로젝트를 등록하려는 경우 아래부분만 진행한다.

(기존에 Gitlab Runner가 셋팅되어있는 경우에도 아래부분만 진행한다.)



sudo gitlab-runner register
(Gitlab의 프로젝트를 선택하고 Settings > CI/CD > Runners settings > Specific Runners 영역을 살펴보면 URL과 토큰 값 확인하여 각각을 입력)
#Gitlab의 서버 주소를 입력한다.
Please enter the gitlab-ci coordinator URL (e.g. [<https://gitlab.com>](<https://gitlab.com/>) )
[<https://gitlab.com>](<https://gitlab.com/>)

#Gitlab CI 에서 발급된 토근 값을 입력한다.
Please enter the gitlab-ci token for this runner:
esu7pUeRdgxDdzomu4hx

#Runner 의 설명을 추가한다.
Please enter the gitlab-ci description for this runner:
deploy-coarching-platform-api-master

#Runner가 동작하게될 태그를 설정한다. .gitlab-ci.yml 의 tag 와 매칭하여 실행되게 된다.
Please enter the gitlab-ci tags for this runner (comma separated):
coarching-platform-api

#Runner가 어떤 작업으로 동작할지 입력한다.
Please enter the executor: docker-ssh, ssh, virtualbox, docker, parallels, shell, docker+machine, docker-ssh+machine, kubernetes:
shell

#Runner 재시작
sudo gitlab-runner restart
 

5-1. Vue / PHP 배포

.gitlab-ci.yml 스크립트 작성


# Master 브랜치에 push가 들어올 때 동작하는 job
deploy-to-master:
  stage: deploy
  only:
    - master
  script:
    - cd /var/www/html
    - git fetch origin
    - git checkout master
    - git reset --hard HEAD
    - git pull

  tags:
    - master
# stage 브랜치에 push가 들어올 때 동작하는 job
deploy-to-stage:
  stage: deploy
  only:
    - stage
  script:
    - cd /var/www/itm
    - git fetch origin
    - git checkout stage
    - git reset --hard HEAD
    - git pull

  tags:
    - stage

 

gitlab 의 devWorker // solutions0036--! 계정에 해당 장비의 SSH 공개키를 등록한다.


ssh-keygen -t rsa -C "devWork" -b 4096
엔터
엔터
엔터
cat /home/carrot/.ssh/id_rsa.pub
 

[Spring 서비스 동작방식]
[초기 서비스]
[ver 1.1 배포]
[ver 1.2 배포]
 

5-2. Spring Boot 배포(B/G, Gradle)

스프링부트 배포(Gradle)의 경우에는 아래 내용을 추가로 작업해주어야 한다.

CI > 장비에서 빌드 및 jar 파일 생성(deploy.sh) > 스프링서버 실행 및 nginx 연동(after.sh)

Gradle 설치 in CentOS


※ JDK8 이상

wget https://services.gradle.org/distributions/gradle-5.0-bin.zip -P /tmp
sudo unzip -d /opt/gradle /tmp/gradle-5.0-bin.zip
ls /opt/gradle/gradle-5.0
sudo vi /etc/profile.d/gradle.sh

# /etc/profile.d/gradle.sh
export GRADLE_HOME=/opt/gradle/gradle-5.0
export PATH=${GRADLE_HOME}/bin:${PATH}

sudo chmod +x /etc/profile.d/gradle.sh
source /etc/profile.d/gradle.sh
gradle -v
 

.gitlab-ci.yml 스크립트(GRADLE)


# master 브런치에 push할때 동작하는 job
# tags 로 구분 중
stages:
  - build
  
master-build:
  stage: build
  script: 
    - echo 'contents prod build....'
    - sh /home/gitlab-runner/contents/deploy.sh
  only:
    - master
  cache:
    key: whenever-with-dependencies
    paths:
      - .gradle/wrapper
      - .gradle/caches
  tags: 
    - contents_prod_pipe
after_script:
  - echo "contents END CI..."
  - sh /home/gitlab-runner/contents/after.sh
  
# ssds_stage 브런치에 push할때 동작하는 job
# tags 로 구분 중
stage-build:
  stage: build
  script: 
    - echo 'contents stage build....'
    - sh /home/gitlab-runner/contents/deploy.sh
  only:
    - contents_stage_branch
  cache:
    key: whenever-with-dependencies
    paths:
      - .gradle/wrapper
      - .gradle/caches
  tags: 
    - contents_stage_pipe
after_script:
  - echo "END CI..."
  - sh /home/gitlab-runner/contents/after.sh

스크립트 파일 - deploy.sh(GRADLE)


#!bin/bash

PROJECT=contents
RUNNER=3hA3DDXy
FILE=carrot-contents-api

echo "$PROJECT stage build before.."

cd /home/gitlab-runner/builds/$RUNNER/0/CarrotGlobal/$FILE
chmod +x /home/gitlab-runner/builds/$RUNNER/0/CarrotGlobal/$FILE/gradlew
export GRADLE_USER_HOME=/home/gitlab-runner/builds/$RUNNER/0/CarrotGlobal/$FILE/.gradle

echo "$PROJECT stage build start..."

/home/gitlab-runner/builds/$RUNNER/0/CarrotGlobal/$FILE/gradlew build

echo "$PROJECT stage build end..."

스크립트 파일 - after.sh(GRADLE)


#!/bin/bash
PROJECT=carrot-contents-api-0.1
runPid=$(pgrep -f $PROJECT)
RUNNER=3hA3DDXy
FILE=carrot-contents-api
JARFILE=contents

echo "current $PROJECT $runPid ...."

BUILD_PATH=/home/gitlab-runner/builds/$RUNNER/0/CarrotGlobal/$FILE/build/libs
JAR_PATH=/home/gitlab-runner/$JARFILE/jar
PORT=8200
KILLPORT=8201

CTN=$(ps -ef | grep $FILE | grep -v grep | grep $PORT | wc -l)

if [ $CTN -gt 0 ]; then
        IDLE_PORT=8201
        echo "set \$contents_service_url https://127.0.0.1:${IDLE_PORT};" | tee /etc/nginx/conf.d/contents-service-url.inc
        cp $BUILD_PATH/$PROJECT.jar $JAR_PATH/$PROJECT-8201.jar
        nohup java -jar -Dserver.port=8201 -Dspring.profiles.active=prod $JAR_PATH/$PROJECT-8201.jar 1>/dev/null 2>&1 &

        echo "java -jar -Dserver.port=8201 -Dspring.profiles.active=prod $JAR_PATH/$PROJECT-8201.jar "
        KILLPORT=8200
        echo "8201 start..."
else
        IDLE_PORT=8200
        echo "set \$contents_service_url https://127.0.0.1:${IDLE_PORT};" | tee /etc/nginx/conf.d/contents-service-url.inc
        cp $BUILD_PATH/$PROJECT.jar $JAR_PATH/$PROJECT-8200.jar
        nohup java -jar -Dserver.port=8200 -Dspring.profiles.active=prod $JAR_PATH/$PROJECT-8200.jar 1>/dev/null 2>&1 &

        echo "java -jar -Dserver.port=8200 -Dspring.profiles.active=prod $JAR_PATH/$PROJECT-8200.jar "

        KILLPORT=8201
        echo "8200 start..."
fi

#ssh carrot@127.0.0.1 "systemctl reload nginx"
#rm $JAR_PATH/javalog${IDLE_PORT}.log
su root service nginx reload

echo "Server $KILLPORT Stopping..."
kill -TERM $runPid
sleep 5
echo "Server $KILLPORT Stopped"
exit

 

5-3. Spring Boot 배포(B/G, Maven)

※ 제한사항 : JDK 11.0.10 이상을 사용할것.

CentOS Maven 3.6.3 설치


#root 계정으로 실행
cd /usr/local/src
wget http://apache.mirror.cdnetworks.com/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
tar -xf apache-maven-3.6.3-bin.tar.gz
mv apache-maven-3.6.3 apache-maven

cd /etc/profile.d/ 
sudo vi maven.sh

# Apache Maven Environment Variables 
# MAVEN_HOME for Maven 1 - M2_HOME for Maven 2 
export M2_HOME=/usr/local/src/apache-maven 
export PATH=${M2_HOME}/bin:${PATH}

chmod +x maven.sh
source /etc/profile.d/maven.sh
 

깃 파이프라인의 CI 디렉토리(소스 디렉토리)에 초기 설치시 실행(프로퍼티와 jar 이 생성됨)


mvn clean package
mvn -N io.takari:maven:wrapper
 

.gitlab-ci.yml 스크립트(Maven)


# master 브런치에 push할때 동작하는 job
# tags 로 구분 중
stages:
  - build

master-build:
  stage: build
  script:
    - chmod +x ./mvnw
    # - mvn clean package
    - mvn -N io.takari:maven:wrapper
    - ./mvnw compile
    - ./mvnw package
    - echo "contents END CI & Build..."
    - mv ./target/apis-1.0.0.jar /home/carrot/coarching-api/deploy/coarching-platform-api.jar
    - sh /home/carrot/coarching-api/after.sh

  only:
    - master
  tags:
    - coarching-platform-api
 

NGINX 설정

/etc/nginx/conf.d/default.conf


server {
        server_name     bnb-api.carrotglobal.com;
        include /etc/nginx/conf.d/bnb-service-url.inc;
        listen  80;        
        location / {
                proxy_pass $bnb_service_url;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
        }
}

server {
        server_name     bnb-api.carrotglobal.com;
        include /etc/nginx/conf.d/bnb-service-url.inc;        
        location / {
                proxy_pass $bnb_service_url;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
        }
        listen 443 ssl; 
        ssl_certificate /home/carrot/ssl/carrotglobal.com/_carrotglobal_com.crt;
        ssl_certificate_key /home/carrot/ssl/carrotglobal.com/_carrotglobal_com.key;
        ssl_session_timeout  5m;
        ssl_protocols  SSLv2 SSLv3 TLSv1.2 TLSv1.3;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers   on;
}
 

Nginx 의 carrot 계정에서 reload 하기 위한 설정 

 


vi /etc/pam.d/su
# auth  sufficient pam_wheel.so trust use_uid 왼쪽 부분에 주석이 되어있다면 해제한다.

# wheel 그룹에 등록한다.
usermod -G wheel carrot
 

bnb-service-url.inc (러너 실행계정이 파일을 소유하도록 작성)

/etc/nginx/conf.d/bnb-service-url.inc


set $bnb_service_url http://127.0.0.1:8300;

chown gitlab-runner:gitlab-runner bnb-service-url.inc
 

스크립트 파일 - after.sh(Maven)


#!/bin/bash
RUNNER=j2ndGw7x
FILE=coarching-platform-api
runPid=$(pgrep -f $FILE)

echo "current $FILE $runPid ...."

JAR_PATH=/home/carrot/coarching-api/deploy
PORT=8300
KILLPORT=8301

CTN=$(ps -ef | grep $FILE | grep -v grep | grep $PORT | wc -l)

if [ $CTN -gt 0 ]; then
        IDLE_PORT=8301
        echo "set \$bnb_service_url http://127.0.0.1:${IDLE_PORT};" | tee /etc/nginx/conf.d/bnb-service-url.inc
        nohup java -jar -Dserver.port=8301 -Dspring.profiles.active=prod $JAR_PATH/$FILE.jar 1>/dev/null 2>&1 &
        echo "java -jar -Dserver.port=8301 -Dspring.profiles.active=prod $JAR_PATH/$FILE.jar "
        KILLPORT=8300
        echo "8301 start..."
else
        IDLE_PORT=8300
        echo "set \$bnb_service_url http://127.0.0.1:${IDLE_PORT};" | tee /etc/nginx/conf.d/bnb-service-url.inc
        nohup java -jar -Dserver.port=8300 -Dspring.profiles.active=prod $JAR_PATH/$FILE.jar 1>/dev/null 2>&1 &
        echo "java -jar -Dserver.port=8300 -Dspring.profiles.active=prod $JAR_PATH/$FILE.jar "
        KILLPORT=8301
        echo "8300 start..."
fi

#ssh carrot@127.0.0.1 "systemctl reload nginx"
#rm $JAR_PATH/javalog${IDLE_PORT}.log
su root service nginx reload

echo "Server $KILLPORT Stopping..."
kill -TERM $runPid
sleep 5
echo "Server $KILLPORT Stopped"
exit

 
