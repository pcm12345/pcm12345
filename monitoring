1.네이버 클라우드 설정

 

왼쪽 메뉴바에 Monitoring 클릭 (없는 경우에 Products & Services 클릭) 

Dashboard → Server Dashboard 클릭


 

 

화면 상단 서버리스트에서 해당 서버 선택


 

 

2. 네이버 클라우드에서 상세 모니터링

상세 모니터링 설정 방법 및 내용 출처 :  https://guide.ncloud-docs.com/docs/ko/management-management-1-1 

 

상세모니터링과 일반 모니터링의 차이 

– 모니터링 현황 정보를 11개의 차트로 제공

– 이벤트(이슈)에 대한 정보를 직접 통보 받을 수 있음

– 차트는 최근 8일은 1분 주기, 1달은 5분 주기, 3년까지는 2시간 주기로 그래프를 확인할 수 있음

–  Compare, Sync Tooltip, Fix Y-Axis 기능 제공

  Compare : 'No'가 default 입니다. 1일, 3일, 1주일을 선택 가능하며 A day(1일)를 선택 시 하루 전 성능값이 Chart에 추가됩니다. 동일 시간의 성능값과 비교해서 모니터링할 수 있습니다.

 

Sync Tooltip : 클릭하면 11개의 전체 Chart에 툴팁이 표시되어 여러 성능값을 한눈에 확인할 수 있습니다.

Fix Y-Axis On : 설정 시 Y축 Max 값이 지정된 성능값의 경우 Y축이 Max 값으로 고정됩니다. % 단위의 성능 Chart의 경우 Y축이 100으로 고정됩니다.

 

각 Chart에 마우스 오버 시 해당 시점의 성능값(MIN, MAX, AVG)을 툴팁으로 제공합니다.

 

 

 

CPU Usage (80%이상 이슈 발생 가능성 높음)

 

 

 

Memory Usage  (80~90% 할당 시 이슈 발생 가능성 높음)

 

 

 

DISK IO (Read/Write)

 

 

 

Network (In/Out bps) 

 

 

 

Detail Chart

→ 그래프 우측 상단 메뉴 아이콘 클릭 시 Deatail Chart확인 가능

  –  core별 CPU Usage 확인 가능

  – 장치 별 Disk 사용량 확인 가능

  – Network interface의 In/Out ( eth0, lo) 확인 가능

  – Disk IO Read, Write 수치 확인 가능

 

 

임계치 설정 및 알림 기능

화면 좌측 Monitoring → Configuration → New Observation 타고 들어와서 해당 서버 선택

순서대로 진행하게 되면 아래의 과정들을 진행하게 된다.

 

 

 

 

3. 모바텀으로 모니터링

Top명령어를 이용한 모니터링

CPU 사용량 로그 확인 

 


$> top
$> shift p : cpu사용량 별 모니터링 (내림차순)
$> shift m : memory사용량 별 모니터링 (내림차순)
$> s 이후 숫자입력(단위시간) 간격으로 데이터 갱신
숫자 1 : core별 사용량 노출
%Cpu(s) : 0.1us (사진기준) → 모니터링시 80%까지 치솟는지 확인

 

– 로그 상단내용

17:49:13    : 현재 서버의 시간

5 users : 5명의 사용자가 접속 중

load average : 부하율

Tasks : 237 total, 1running, 236 sleeping   : 237개의 프로세스중 1개만 가동중 236개는 대기중

0 stopped, 0 zombie : 0개의 프로세스가 멈춤, 0개의 프로세스가 좀비상태

 

%Cpu(s)

0.1 us : 유저 레벨에서 사용하고 있는 CPU의 비중

0.0 sy :  시스템 레벨에서 사용하고 있는 CPU의 비중

99.9 id :유휴 상태의 CPU의 비중

0.0 wa : 시스템이 I/O 요청을 처리하지 못한 상태에서의 CPU idle 상태의 비중

 

KiB Mem

65781708 total : 전체 물리적인 메모리

56898124 free : 여유 메모리

6688176 used : 사용 중인 메모리

2195408 buff/cache : 버퍼된 메모리

 

출처 : https://man7.org/linux/man-pages/ 

 

 

 

Sar명령어를 이용한 모니터링

*기본적으로 sysstat 패키지를 설치해야한다.

→ os설치는 좋지 않은 방법이므로 Top을 추천드립니다. (데이터 관리가 되지 않음)

cpu사용량 확인 (0번 코어)


$> sar -P 0
 

%user : 동안 발생한 CPU 사용률
                     사용자 수준(응용 프로그램)에서 실행합니다. 메모
                     이 필드에는 가상 실행에 소요된 시간이 포함됩니다.
                     프로세서.

 

%nice : 동안 발생한 CPU 사용률
                     좋은 우선 순위로 사용자 수준에서 실행합니다.

 

%system : 동안 발생한 CPU 사용률
                     시스템 수준(커널)에서 실행합니다. 

참고 : 이 필드에는 하드웨어 서비스에 소요된 시간이 포함 및 소프트웨어 인터럽트.

 

%iowait : CPU 또는 CPU가 유휴 상태인 시간의 백분율, 시스템에 미해결 디스크 I/O가 있는 동안 요구.

 

%steal : 하이퍼바이저가 실행되는 동안 가상 CPU, 다른 가상 프로세서를 서비스합니다.

 

%idle : CPU가 유휴 상태였던 시간의 백분율

 

 

 

 메모리 사용량 로그 확인


$> sar -r 4
숫자는 시간간격을 의미

%memused의 상태가 80%이상 시 이슈 발생 가능성

 

 

 

 

0번부터 15번 코어사용량 4초 간격으로 확인


$> sar -P 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 4
 

출처 :  https://man7.org/linux/man-pages/ 

 

 

 

 

 

iostat명령어를 이용한 DISK I/O 모니터링

‘읽고’ , ‘쓰는’ 작업이 있을 때 DB는 DISK를 사용한다.

insert량이 많아지면 큐사이즈가 늘어난다. 

→ await시간 즉 지연율이 늘어난다.

→ DML의 영향을 받아 SELECT 조회하는 성능이 떨어지게 된다.

 

**await 수치가 3자리 이상일 경우 이슈발생 상황이므로 수치 체크 잘해야함

DISK I.O 로그 확인


$> iostat -d 4
 

-d 뒤에 숫자는 시간간격을 의미

 

디스크 장치의 활용량 출력 정보

tps - 전송하는 초당 전송 수를 나타냅니다.

Blk_read/s (kB_read/s, MB_read/s) - 장치에서 읽은 초당 데이터의 양을 나타냅니다.

Blk_wrtn/s (kB_wrtn/s, MB_wrtn/s) - 장치에서 쓴 초당 데이터의 양을 나타냅니다.

Blk_read (kB_read, MB_read) - 총 읽은 블록수

Blk_wrtn (kB_wrtn, MB_wrtn) - 총 쓴 블록수

 

 

 

 

 

DISK I.O wait 체크 (io wait ( [read/write wait] ) 수치가 기본적으로 0byte든 0블럭이든,  0을 유지해야 좋음 수치가 +로 증가하게 되면 지연이 생긴다는 뜻)


$> iostat -x 4
 

rrqm/s : 병합된 초당 읽기 요청 수

wrqm/s : 병합된 초당 쓰기 요청 수

r/s : 디바이스에 요청한 초당 읽기 요청의 건수

w/s : 디바이스에 요청한 초당 쓰기 요청의 건수

rsec/s : 디바이스에서 초당 읽어들인 섹터의 수

wsec/s : 디바이스에서 초당 기록한 섹터의 수

avgrq-sz : 디바이스에 요청한 I/O 요청의 평균 크기(KB)

avgqu-sz : 디바이스에 요청한 초당 평균 대기열 길이

await : 디바이스에서 처리되기 위해서 요청된 I/O 평균 시간(밀리초, 1/1000초).

svctm : 디바이스에서 처리한 I/O 평균 시간 (밀리초, 1/1000초)

%util : 디바이스에서 요청한 I/O 작업을 수행하기 위해 사용한 CPU 시간 비율. 이 값이 100%에 가까워지면 디바이스가 한계에 도달했다고 보면 됨.

 

출처 :  https://man7.org/linux/man-pages/ 

 

 

4. sar, top, iostat 명령어 관련 내용 블로그

sar 명령어를 이용한 시스템 모니터링

출처 : https://blog.cafe24.com/2005 , https://brunch.co.kr/@lars/9 

 

top 명령어를 이용한 시스템 모니터링

출처 : https://zzsza.github.io/development/2018/07/18/linux-top/ , https://ironmask84.tistory.com/355

 

iostat 명령어를 이용한 시스템 모니터링 

출처 : https://server-talk.tistory.com/49 , https://hippogrammer.tistory.com/150 ,  http://egloos.zum.com/darkit/v/206183

 
